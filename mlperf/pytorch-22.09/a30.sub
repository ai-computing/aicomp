#!/bin/bash

# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euxo pipefail

# Vars without defaults
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${CONT:?CONT not set}"
: "${DATADIR:?DATADIR not set}"

# Vars with defaults
: "${NEXP:=1}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${LOGDIR:=$(pwd)/results}"

# Other vars
LOGBASE="${DATESTAMP}"
readonly _logfile_base="${LOGDIR}/${LOGBASE}"
readonly _cont_name=bert.$$
_cont_mounts=(
    "--volume=${DATADIR}:/workspace/data"
    "--volume=${DATADIR_PHASE2}:/workspace/data_phase2"
    "--volume=${CHECKPOINTDIR_PHASE1}:/workspace/phase1"
    "--volume=${EVALDIR}:/workspace/evaldata"
    "--volume=${UNITTESTDIR}:/workspace/unit_test_data"
)
echo "${_cont_mounts[@]}"

# MLPerf vars
MLPERF_HOST_OS=$(
    source /etc/os-release
    source /etc/dgx-release || true
    echo "\${PRETTY_NAME} / \${DGX_PRETTY_NAME:-???} \${DGX_OTA_VERSION:-\${DGX_SWBUILD_VERSION:-???}}"
)
export MLPERF_HOST_OS


# Setup directories
mkdir -p "${LOGDIR}"

# Cleanup container
cleanup_docker() {
    docker container rm -f "${_cont_name}" || true
}
cleanup_docker
trap 'set -eux; cleanup_docker' EXIT

# list of envvars to pass to docker
get_user_envvars() {
    # "comm -23" subtracts the list in its second argument from the list in its first argument
    comm -23 <(compgen -e | sort) <(docker exec "${_cont_name}" bash -c "compgen -e" | sort)
}

if [ -z "${NV_GPU-}" ]; then
  readonly _docker_gpu_args="--gpus all"
else
  readonly _docker_gpu_args='--gpus="'device=${NV_GPU}'" -e NVIDIA_VISIBLE_DEVICES='"${NV_GPU}"
fi

# Setup container
docker run ${_docker_gpu_args} --pull=always --rm --init --detach \
    --net=host --uts=host --ipc=host --security-opt=seccomp=unconfined \
    --ulimit=stack=67108864 --ulimit=memlock=-1 \
    --name="${_cont_name}" "${_cont_mounts[@]}" \
    "${CONT}" sleep infinity
#make sure container has time to finish initialization
sleep 30
docker exec "${_cont_name}" true

echo NV_GPU=${NV_GPU-}
echo NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES-}
nvidia-smi topo -m

readonly TORCH_RUN=( 'torchrun' '--standalone' '--no_python' )

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    (
        echo "Beginning trial ${_experiment_index} of ${NEXP}"
	echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST}"
	echo "${MLPERF_HOST_OS}"

        # Print system info
#        docker exec "${_cont_name}" python -c "
#import mlperf_logger 
#from mlperf_logging.mllog import constants 
#mlperf_logger.mlperf_submission_log(${MLPERF_MODEL_CONSTANT})"

        # Clear caches
        if [ "${CLEAR_CACHES}" -eq 1 ]; then
            sync && sudo /sbin/sysctl vm.drop_caches=3
            docker exec "${_cont_name}" python -c "
import mlperf_logger
mlperf_logger.log_event(key=mlperf_logger.constants.CACHE_CLEAR, value=True)"
        fi

        # Run experiment
	docker exec --env-file <(get_user_envvars) \
	       "${_cont_name}"                     \
	       "${TORCH_RUN[@]}" --nproc_per_node="${DGXNGPU}" ./a30-run_and_time.sh
    ) |& tee "${_logfile_base}_${_experiment_index}.log"
done
